# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from fcu_common/Command.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Command(genpy.Message):
  _md5sum = "1696698a6cd6cd733fa0661497359dd2"
  _type = "fcu_common/Command"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Defines the control commands sent to the autopilot block

float64 normalized_roll		# nomalized roll, roll rate, or aleraon deflection (-1 to 1)
float64 normalized_pitch	# nomalized pitch, pitch rate or elevator deflection (-1 to 1)
float64 normalized_yaw		# nomalized yaw rate or rudder deflection (-1 to 1)
float64 normalized_throttle	# nomalized throttle (0 to 1)
uint8 MODE_ACRO=0
uint8 MODE_ANGLE=1
uint8 MODE_FIXED_WING=2
uint8 mode

"""
  # Pseudo-constants
  MODE_ACRO = 0
  MODE_ANGLE = 1
  MODE_FIXED_WING = 2

  __slots__ = ['normalized_roll','normalized_pitch','normalized_yaw','normalized_throttle','mode']
  _slot_types = ['float64','float64','float64','float64','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       normalized_roll,normalized_pitch,normalized_yaw,normalized_throttle,mode

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Command, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.normalized_roll is None:
        self.normalized_roll = 0.
      if self.normalized_pitch is None:
        self.normalized_pitch = 0.
      if self.normalized_yaw is None:
        self.normalized_yaw = 0.
      if self.normalized_throttle is None:
        self.normalized_throttle = 0.
      if self.mode is None:
        self.mode = 0
    else:
      self.normalized_roll = 0.
      self.normalized_pitch = 0.
      self.normalized_yaw = 0.
      self.normalized_throttle = 0.
      self.mode = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_4dB.pack(_x.normalized_roll, _x.normalized_pitch, _x.normalized_yaw, _x.normalized_throttle, _x.mode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 33
      (_x.normalized_roll, _x.normalized_pitch, _x.normalized_yaw, _x.normalized_throttle, _x.mode,) = _struct_4dB.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_4dB.pack(_x.normalized_roll, _x.normalized_pitch, _x.normalized_yaw, _x.normalized_throttle, _x.mode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 33
      (_x.normalized_roll, _x.normalized_pitch, _x.normalized_yaw, _x.normalized_throttle, _x.mode,) = _struct_4dB.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_4dB = struct.Struct("<4dB")
