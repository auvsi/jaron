# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from fcu_common/FW_Controller_Commands.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class FW_Controller_Commands(genpy.Message):
  _md5sum = "866a52e318b720616a6342f870a0e13f"
  _type = "fcu_common/FW_Controller_Commands"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Controller commands output from the path follower, input to autopilot controller

# @warning Va_c, h_c and chi_c have always to be valid, the aux array is optional
float32 Va_c		# Commanded airspeed (m/s)
float32 h_c		# Commanded altitude (m)
float32 chi_c		# Commanded course (rad)
float32[4] aux		# Optional auxiliary commands
bool aux_valid		# Auxiliary commands valid

"""
  __slots__ = ['Va_c','h_c','chi_c','aux','aux_valid']
  _slot_types = ['float32','float32','float32','float32[4]','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Va_c,h_c,chi_c,aux,aux_valid

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FW_Controller_Commands, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.Va_c is None:
        self.Va_c = 0.
      if self.h_c is None:
        self.h_c = 0.
      if self.chi_c is None:
        self.chi_c = 0.
      if self.aux is None:
        self.aux = [0.,0.,0.,0.]
      if self.aux_valid is None:
        self.aux_valid = False
    else:
      self.Va_c = 0.
      self.h_c = 0.
      self.chi_c = 0.
      self.aux = [0.,0.,0.,0.]
      self.aux_valid = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3f.pack(_x.Va_c, _x.h_c, _x.chi_c))
      buff.write(_struct_4f.pack(*self.aux))
      buff.write(_struct_B.pack(self.aux_valid))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.Va_c, _x.h_c, _x.chi_c,) = _struct_3f.unpack(str[start:end])
      start = end
      end += 16
      self.aux = _struct_4f.unpack(str[start:end])
      start = end
      end += 1
      (self.aux_valid,) = _struct_B.unpack(str[start:end])
      self.aux_valid = bool(self.aux_valid)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3f.pack(_x.Va_c, _x.h_c, _x.chi_c))
      buff.write(self.aux.tostring())
      buff.write(_struct_B.pack(self.aux_valid))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.Va_c, _x.h_c, _x.chi_c,) = _struct_3f.unpack(str[start:end])
      start = end
      end += 16
      self.aux = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=4)
      start = end
      end += 1
      (self.aux_valid,) = _struct_B.unpack(str[start:end])
      self.aux_valid = bool(self.aux_valid)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_4f = struct.Struct("<4f")
_struct_B = struct.Struct("<B")
_struct_3f = struct.Struct("<3f")
