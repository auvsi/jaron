# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from fcu_common/FW_Waypoint.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class FW_Waypoint(genpy.Message):
  _md5sum = "7fa894c36e1adfc4bdc28e11056871e8"
  _type = "fcu_common/FW_Waypoint"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# New waypoint, input to path manager

# @warning w and set_current always have to be valid; the chi_d is optional.
float32[3] w		# Waypoint in local NED (m)
float32 chi_d		# Desired course at this waypoint (rad)
bool chi_valid		# Desired course valid
float32 Va_d		# Desired airspeed (m/s)
bool set_current	# Sets this waypoint to be executed now!

"""
  __slots__ = ['w','chi_d','chi_valid','Va_d','set_current']
  _slot_types = ['float32[3]','float32','bool','float32','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       w,chi_d,chi_valid,Va_d,set_current

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FW_Waypoint, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.w is None:
        self.w = [0.,0.,0.]
      if self.chi_d is None:
        self.chi_d = 0.
      if self.chi_valid is None:
        self.chi_valid = False
      if self.Va_d is None:
        self.Va_d = 0.
      if self.set_current is None:
        self.set_current = False
    else:
      self.w = [0.,0.,0.]
      self.chi_d = 0.
      self.chi_valid = False
      self.Va_d = 0.
      self.set_current = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_3f.pack(*self.w))
      _x = self
      buff.write(_struct_fBfB.pack(_x.chi_d, _x.chi_valid, _x.Va_d, _x.set_current))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 12
      self.w = _struct_3f.unpack(str[start:end])
      _x = self
      start = end
      end += 10
      (_x.chi_d, _x.chi_valid, _x.Va_d, _x.set_current,) = _struct_fBfB.unpack(str[start:end])
      self.chi_valid = bool(self.chi_valid)
      self.set_current = bool(self.set_current)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(self.w.tostring())
      _x = self
      buff.write(_struct_fBfB.pack(_x.chi_d, _x.chi_valid, _x.Va_d, _x.set_current))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 12
      self.w = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      _x = self
      start = end
      end += 10
      (_x.chi_d, _x.chi_valid, _x.Va_d, _x.set_current,) = _struct_fBfB.unpack(str[start:end])
      self.chi_valid = bool(self.chi_valid)
      self.set_current = bool(self.set_current)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_fBfB = struct.Struct("<fBfB")
_struct_3f = struct.Struct("<3f")
